"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var util = require("../util");
var impl = require("../impl");

var AudioBuffer = function () {
  function AudioBuffer(context, opts) {
    _classCallCheck(this, AudioBuffer);

    util.defineProp(this, "_impl", new impl.AudioBuffer(context._impl, opts));
  }

  _createClass(AudioBuffer, [{
    key: "getChannelData",
    value: function getChannelData(channel) {
      return this._impl.getChannelData(channel);
    }
  }, {
    key: "copyFromChannel",
    value: function copyFromChannel(destination, channelNumber, startInChannel) {
      this._impl.copyFromChannel(destination, channelNumber, startInChannel);
    }
  }, {
    key: "copyToChannel",
    value: function copyToChannel(source, channelNumber, startInChannel) {
      this._impl.copyToChannel(source, channelNumber, startInChannel);
    }
  }, {
    key: "sampleRate",
    get: function get() {
      return this._impl.getSampleRate();
    }
  }, {
    key: "length",
    get: function get() {
      return this._impl.getLength();
    }
  }, {
    key: "duration",
    get: function get() {
      return this._impl.getDuration();
    }
  }, {
    key: "numberOfChannels",
    get: function get() {
      return this._impl.getNumberOfChannels();
    }
  }]);

  return AudioBuffer;
}();

module.exports = AudioBuffer;