"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require("../util");
var AudioNode = require("./AudioNode");
var ScriptProcessorNodeDSP = require("./dsp/ScriptProcessorNode");

var _require = require("../constants/ChannelCountMode"),
    EXPLICIT = _require.EXPLICIT;

var MinBufferSize = 256;
var MaxBufferSize = 16384;

var ScriptProcessorNode = function (_AudioNode) {
  _inherits(ScriptProcessorNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.bufferSize
   * @param {number}       opts.numberOfInputChannels
   * @param {number}       opts.numberOfOutputChannels
   */
  function ScriptProcessorNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ScriptProcessorNode);

    var bufferSize = opts.bufferSize;
    var numberOfInputChannels = opts.numberOfInputChannels;
    var numberOfOutputChannels = opts.numberOfOutputChannels;

    bufferSize = util.clamp(bufferSize | 0, MinBufferSize, MaxBufferSize);
    bufferSize = util.toPowerOfTwo(bufferSize, Math.ceil);
    numberOfInputChannels = util.toValidNumberOfChannels(numberOfInputChannels);
    numberOfOutputChannels = util.toValidNumberOfChannels(numberOfOutputChannels);

    var _this = _possibleConstructorReturn(this, (ScriptProcessorNode.__proto__ || Object.getPrototypeOf(ScriptProcessorNode)).call(this, context, {
      inputs: [numberOfInputChannels],
      outputs: [numberOfOutputChannels],
      channelCount: numberOfInputChannels,
      channelCountMode: EXPLICIT,
      allowedMaxChannelCount: numberOfInputChannels,
      allowedMinChannelCount: numberOfInputChannels,
      allowedChannelCountMode: [EXPLICIT]
    }));

    _this._bufferSize = bufferSize;
    _this.enableOutputsIfNecessary();
    _this.dspInit();
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(ScriptProcessorNode, [{
    key: "getBufferSize",
    value: function getBufferSize() {
      return this._bufferSize;
    }

    /**
     * @return {object} eventItem
     */

  }, {
    key: "setEventItem",
    value: function setEventItem(eventItem) {
      this.dspSetEventItem(eventItem);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getTailTime",
    value: function getTailTime() {
      return Infinity;
    }
  }]);

  return ScriptProcessorNode;
}(AudioNode);

Object.assign(ScriptProcessorNode.prototype, ScriptProcessorNodeDSP);

module.exports = ScriptProcessorNode;