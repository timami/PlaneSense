"use strict";

var blackman = require("scijs-window-functions/blackman");

var AnalyserNodeDSP = {
  dspInit: function dspInit(fftSize) {
    this._timeDomainBuffer = [];
    this.dspUpdateSizes(fftSize);
  },
  dspUpdateSizes: function dspUpdateSizes(fftSize) {
    this._previousSmooth = new Float32Array(fftSize / 2);
    this._blackmanTable = new Float32Array(fftSize).map(function (v, i) {
      return blackman(i, fftSize);
    });
  },
  dspProcess: function dspProcess() {
    var _this = this;

    // just pass data through
    this.outputs[0].bus.copyFrom(this.inputs[0].bus);
    // merge and store data in our buffer
    var channels = this.inputs[0].bus.getChannelData();
    if (channels.length) {
      var len = channels[0].length;

      var _loop = function _loop(i) {
        var data = 0;
        channels.forEach(function (channel) {
          data += channel[i];
        });
        _this._timeDomainBuffer.push(data / channels.length);
      };

      for (var i = 0; i < len; i++) {
        _loop(i);
      }
      while (this._timeDomainBuffer.length > this._fftSize) {
        this._timeDomainBuffer.shift();
      }
    }
  }
};

module.exports = AnalyserNodeDSP;