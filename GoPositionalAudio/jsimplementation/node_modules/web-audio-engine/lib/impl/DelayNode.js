"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require("../util");
var AudioNode = require("./AudioNode");
var DelayNodeDSP = require("./dsp/DelayNode");

var _require = require("../constants/ChannelCountMode"),
    MAX = _require.MAX;

var _require2 = require("../constants/AudioParamRate"),
    AUDIO_RATE = _require2.AUDIO_RATE;

var DelayNode = function (_AudioNode) {
  _inherits(DelayNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.maxDelayTime
   */
  function DelayNode(context) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, DelayNode);

    var maxDelayTime = util.defaults(opts.maxDelayTime, 1);

    var _this = _possibleConstructorReturn(this, (DelayNode.__proto__ || Object.getPrototypeOf(DelayNode)).call(this, context, {
      inputs: [1],
      outputs: [1],
      channelCount: 2,
      channelCountMode: MAX
    }));

    _this._maxDelayTime = Math.max(0, util.toNumber(maxDelayTime));
    _this._delayTime = _this.addParam(AUDIO_RATE, 0);

    _this.dspInit(_this._maxDelayTime);
    _this.dspUpdateKernel(1);
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(DelayNode, [{
    key: "getDelayTime",
    value: function getDelayTime() {
      return this._delayTime;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getMaxDelayTime",
    value: function getMaxDelayTime() {
      return this._maxDelayTime;
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "channelDidUpdate",
    value: function channelDidUpdate(numberOfChannels) {
      this.dspUpdateKernel(numberOfChannels);
      this.outputs[0].setNumberOfChannels(numberOfChannels);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getTailTime",
    value: function getTailTime() {
      return this._maxDelayTime;
    }
  }]);

  return DelayNode;
}(AudioNode);

Object.assign(DelayNode.prototype, DelayNodeDSP);

module.exports = DelayNode;