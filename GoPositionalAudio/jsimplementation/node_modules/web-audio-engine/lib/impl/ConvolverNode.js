"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require("../util");
var AudioNode = require("./AudioNode");
var AudioBuffer = require("./AudioBuffer");
var ConvolverNodeDSP = require("./dsp/ConvolverNode");

var _require = require("../constants/ChannelCountMode"),
    CLAMPED_MAX = _require.CLAMPED_MAX,
    EXPLICIT = _require.EXPLICIT;

var ConvolverNode = function (_AudioNode) {
  _inherits(ConvolverNode, _AudioNode);

  /**
   * @param {AudioContext} context
   */
  function ConvolverNode(context) {
    _classCallCheck(this, ConvolverNode);

    var _this = _possibleConstructorReturn(this, (ConvolverNode.__proto__ || Object.getPrototypeOf(ConvolverNode)).call(this, context, {
      inputs: [1],
      outputs: [1],
      channelCount: 2,
      channelCountMode: CLAMPED_MAX,
      allowedMaxChannelCount: 2,
      allowedChannelCountMode: [CLAMPED_MAX, EXPLICIT]
    }));

    _this._buffer = null;
    _this._audioData = null;
    _this._normalize = true;
    return _this;
  }

  /**
   * @return {AudioBuffer}
   */


  _createClass(ConvolverNode, [{
    key: "getBuffer",
    value: function getBuffer() {
      return this._buffer;
    }

    /**
     * @param {AudioBuffer} value
     */

  }, {
    key: "setBuffer",
    value: function setBuffer(value) {
      value = util.toImpl(value);

      /* istanbul ignore else */
      if (value instanceof AudioBuffer) {
        this._buffer = value;
        this._audioData = this._buffer.audioData;
      }
    }

    /**
     * @return {boolean}
     */

  }, {
    key: "getNormalize",
    value: function getNormalize() {
      return this._normalize;
    }

    /**
     * @param {boolean} value
     */

  }, {
    key: "setNormalize",
    value: function setNormalize(value) {
      this._normalize = !!value;
    }

    /**
     * @param {number} numberOfChannels
     */

  }, {
    key: "channelDidUpdate",
    value: function channelDidUpdate(numberOfChannels) {
      numberOfChannels = Math.min(numberOfChannels, 2);

      this.outputs[0].setNumberOfChannels(numberOfChannels);
    }
  }]);

  return ConvolverNode;
}(AudioNode);

Object.assign(ConvolverNode.prototype, ConvolverNodeDSP);

module.exports = ConvolverNode;