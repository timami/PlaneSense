"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AudioNode = require("./AudioNode");
var DynamicsCompressorNodeDSP = require("./dsp/DynamicsCompressorNode");

var _require = require("../constants/ChannelCountMode"),
    EXPLICIT = _require.EXPLICIT;

var _require2 = require("../constants/AudioParamRate"),
    CONTROL_RATE = _require2.CONTROL_RATE;

var DynamicsCompressorNode = function (_AudioNode) {
  _inherits(DynamicsCompressorNode, _AudioNode);

  /**
   * @param {AudioContext} context
   */
  function DynamicsCompressorNode(context) {
    _classCallCheck(this, DynamicsCompressorNode);

    var _this = _possibleConstructorReturn(this, (DynamicsCompressorNode.__proto__ || Object.getPrototypeOf(DynamicsCompressorNode)).call(this, context, {
      inputs: [1],
      outputs: [2],
      channelCount: 2,
      channelCountMode: EXPLICIT
    }));

    _this._threshold = _this.addParam(CONTROL_RATE, -24);
    _this._knee = _this.addParam(CONTROL_RATE, 30);
    _this._ratio = _this.addParam(CONTROL_RATE, 12);
    _this._attack = _this.addParam(CONTROL_RATE, 0.003);
    _this._release = _this.addParam(CONTROL_RATE, 0.250);
    return _this;
  }

  /**
   * @param {AudioParam}
   */


  _createClass(DynamicsCompressorNode, [{
    key: "getThreshold",
    value: function getThreshold() {
      return this._threshold;
    }

    /**
     * @param {AudioParam}
     */

  }, {
    key: "getKnee",
    value: function getKnee() {
      return this._knee;
    }

    /**
     * @param {AudioParam}
     */

  }, {
    key: "getRatio",
    value: function getRatio() {
      return this._ratio;
    }

    /**
     * @return {number}
     */
    /* istanbul ignore next */

  }, {
    key: "getReduction",
    value: function getReduction() {
      throw new TypeError("NOT YET IMPLEMENTED");
    }

    /**
     * @param {AudioParam}
     */

  }, {
    key: "getAttack",
    value: function getAttack() {
      return this._attack;
    }

    /**
     * @param {AudioParam}
     */

  }, {
    key: "getRelease",
    value: function getRelease() {
      return this._release;
    }
  }]);

  return DynamicsCompressorNode;
}(AudioNode);

Object.assign(DynamicsCompressorNode.prototype, DynamicsCompressorNodeDSP);

module.exports = DynamicsCompressorNode;